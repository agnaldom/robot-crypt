version: '3.8'

services:
  # API Service - FastAPI
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: robot-crypt-api
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:password@db:5432/robot_crypt
      - DEBUG=false
      - SECRET_KEY=dev-secret-key-change-in-production
      - SIMULATION_MODE=true
      - USE_TESTNET=false
      - HOST=0.0.0.0
      - PORT=8000
      - REDIS_URL=redis://redis:6379
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["api"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - robot-crypt-network

  # Trading Bot Service
  robot:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: robot-crypt-bot
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:password@db:5432/robot_crypt
      - SECRET_KEY=dev-secret-key-change-in-production
      - SIMULATION_MODE=true
      - USE_TESTNET=false
      - REDIS_URL=redis://redis:6379
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["robot"]
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - robot-crypt-network
    profiles:
      - bot

  # Development service with hot reload
  dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: robot-crypt-dev
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:password@db:5432/robot_crypt
      - DEBUG=true
      - SECRET_KEY=dev-secret-key-change-in-production
      - SIMULATION_MODE=true
      - USE_TESTNET=false
      - HOST=0.0.0.0
      - PORT=8000
      - RELOAD_FLAG=--reload
      - REDIS_URL=redis://redis:6379
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["api"]
    restart: unless-stopped
    volumes:
      - .:/app
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - robot-crypt-network
    profiles:
      - dev

  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: robot_crypt
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - robot-crypt-network

  redis:
    image: redis:7-alpine
    container_name: robot-crypt-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - robot-crypt-network

  adminer:
    image: adminer:latest
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: db
    depends_on:
      - db
    restart: unless-stopped
    networks:
      - robot-crypt-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  robot-crypt-network:
    driver: bridge
