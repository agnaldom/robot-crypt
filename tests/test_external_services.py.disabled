"""
Integration tests for external services.
"""

import pytest
import asyncio
import aiohttp
from unittest.mock import AsyncMock, patch, MagicMock
from datetime import datetime, timedelta
import json

from src.api.external.market import EnhancedMarketDataProvider, MarketData, NewsArticle, RateLimiter
from src.api.external.market_data import MarketDataClient
from src.api.external.news_api import NewsAPI
from src.contextual_analysis.news_api_client import NewsApiClient


class TestMarketDataIntegration:
    """Test market data external service integration."""
    
    @pytest.mark.asyncio
    async def test_coingecko_api_integration(self):
        """Test CoinGecko API integration."""
        async with EnhancedMarketDataProvider() as provider:
            with patch.object(provider, '_request') as mock_request:
                # Mock successful response
                mock_request.return_value = {
                    "bitcoin": {
                        "usd": 45000,
                        "usd_market_cap": 850000000000,
                        "usd_24h_vol": 28000000000,
                        "usd_24h_change": 2.5
                    }
                }
                
                result = await provider.get_crypto_prices_coingecko(["BTC"])
                
                assert len(result) == 1
                assert isinstance(result[0], MarketData)
                assert result[0].symbol == "BTC"
                assert result[0].price == 45000
                assert result[0].price_change_percentage_24h == 2.5
    
    @pytest.mark.asyncio
    async def test_coinpaprika_api_integration(self):
        """Test CoinPaprika API integration."""
        async with EnhancedMarketDataProvider() as provider:
            with patch.object(provider, '_request') as mock_request:
                # Mock successful response for coin list
                mock_request.side_effect = [
                    [{"id": "btc-bitcoin", "name": "Bitcoin", "symbol": "BTC"}],
                    {
                        "id": "btc-bitcoin",
                        "name": "Bitcoin",
                        "symbol": "BTC",
                        "quotes": {
                            "USD": {
                                "price": 45000,
                                "percent_change_24h": 2.5,
                                "market_cap": 850000000000,
                                "volume_24h": 28000000000
                            }
                        }
                    }
                ]
                
                result = await provider.get_crypto_prices_coinpaprika(["BTC"])
                
                assert len(result) == 1
                assert isinstance(result[0], MarketData)
                assert result[0].symbol == "BTC"
                assert result[0].price == 45000
    
    @pytest.mark.asyncio
    async def test_news_api_integration(self):
        """Test news API integration."""
        async with EnhancedMarketDataProvider() as provider:
            with patch.object(provider, '_request') as mock_request:
                # Mock news response
                mock_request.return_value = {
                    "results": [
                        {
                            "title": "Bitcoin reaches new highs",
                            "description": "Bitcoin price surges to $45,000",
                            "url": "https://example.com/news/1",
                            "published_at": "2024-01-01T12:00:00Z",
                            "source": {"title": "CryptoNews"},
                            "currencies": [{"code": "BTC", "title": "Bitcoin"}]
                        }
                    ]
                }
                
                result = await provider.get_crypto_news()
                
                assert len(result) == 1
                assert isinstance(result[0], NewsArticle)
                assert result[0].title == "Bitcoin reaches new highs"
                assert "BTC" in result[0].currencies
    
    @pytest.mark.asyncio
    async def test_fallback_mechanism(self):
        """Test fallback mechanism when primary API fails."""
        async with EnhancedMarketDataProvider() as provider:
            with patch.object(provider, 'get_crypto_prices_coingecko') as mock_coingecko:
                with patch.object(provider, 'get_crypto_prices_coinpaprika') as mock_coinpaprika:
                    # Primary API fails
                    mock_coingecko.side_effect = Exception("CoinGecko API error")
                    
                    # Fallback API succeeds
                    mock_coinpaprika.return_value = [
                        MarketData(
                            symbol="BTC",
                            name="Bitcoin",
                            price=45000,
                            price_change_24h=1000,
                            price_change_percentage_24h=2.5,
                            provider="coinpaprika"
                        )
                    ]
                    
                    result = await provider.get_crypto_prices_with_fallback(["BTC"])
                    
                    assert len(result) == 1
                    assert result[0].provider == "coinpaprika"
    
    @pytest.mark.asyncio
    async def test_rate_limiting(self):
        """Test rate limiting functionality."""
        limiter = RateLimiter(calls_per_minute=2)
        
        # First two calls should succeed immediately
        start_time = asyncio.get_event_loop().time()
        await limiter.acquire()
        await limiter.acquire()
        
        # Third call should be rate limited
        with patch('asyncio.sleep') as mock_sleep:
            await limiter.acquire()
            mock_sleep.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_api_error_handling(self):
        """Test API error handling and retry logic."""
        async with EnhancedMarketDataProvider() as provider:
            with patch.object(provider.session, 'get') as mock_get:
                # Mock response that raises an exception
                mock_response = AsyncMock()
                mock_response.status = 500
                mock_response.raise_for_status.side_effect = aiohttp.ClientError("Server error")
                mock_get.return_value.__aenter__.return_value = mock_response
                
                with pytest.raises(Exception):
                    await provider._request("http://test.com", provider="test")
    
    @pytest.mark.asyncio
    async def test_response_parsing(self):
        """Test response parsing and data validation."""
        async with EnhancedMarketDataProvider() as provider:
            # Test malformed response handling
            with patch.object(provider, '_request') as mock_request:
                mock_request.return_value = {"invalid": "structure"}
                
                result = await provider.get_crypto_prices_coingecko(["BTC"])
                
                # Should handle gracefully and return empty list
                assert result == []


class TestNewsAPIIntegration:
    """Test news API integration."""
    
    @pytest.mark.asyncio
    async def test_news_api_client_integration(self):
        """Test NewsApiClient integration."""
        client = NewsApiClient()
        
        with patch.object(client, '_make_request') as mock_request:
            mock_request.return_value = {
                "articles": [
                    {
                        "title": "Crypto market update",
                        "description": "Latest crypto news",
                        "url": "https://example.com",
                        "publishedAt": "2024-01-01T12:00:00Z",
                        "source": {"name": "CryptoNews"}
                    }
                ]
            }
            
            result = await client.get_crypto_news()
            
            assert len(result) == 1
            assert result[0]["title"] == "Crypto market update"
    
    @pytest.mark.asyncio
    async def test_sentiment_analysis_integration(self):
        """Test sentiment analysis integration."""
        client = NewsApiClient()
        
        with patch.object(client, 'analyze_sentiment') as mock_sentiment:
            mock_sentiment.return_value = {"sentiment": "positive", "score": 0.8}
            
            article = {
                "title": "Bitcoin surges to new highs",
                "description": "Great news for crypto investors"
            }
            
            result = await client.analyze_article_sentiment(article)
            
            assert result["sentiment"] == "positive"
            assert result["score"] == 0.8
    
    @pytest.mark.asyncio
    async def test_news_filtering(self):
        """Test news filtering by keywords and relevance."""
        client = NewsApiClient()
        
        articles = [
            {"title": "Bitcoin price rises", "description": "BTC up 5%"},
            {"title": "Stock market news", "description": "S&P 500 gains"},
            {"title": "Ethereum upgrade", "description": "ETH 2.0 update"}
        ]
        
        with patch.object(client, 'get_crypto_news') as mock_news:
            mock_news.return_value = articles
            
            crypto_articles = await client.get_filtered_crypto_news(
                keywords=["bitcoin", "ethereum"]
            )
            
            # Should filter out non-crypto articles
            assert len(crypto_articles) == 2
            assert any("Bitcoin" in article["title"] for article in crypto_articles)
            assert any("Ethereum" in article["title"] for article in crypto_articles)


class TestExchangeAPIIntegration:
    """Test real exchange API integration."""
    
    @pytest.mark.asyncio
    async def test_binance_api_integration(self):
        """Test Binance API integration."""
        from src.api.binance.client import BinanceClient
        
        client = BinanceClient()
        
        with patch.object(client, '_make_request') as mock_request:
            # Mock successful price response
            mock_request.return_value = {
                "symbol": "BTCUSDT",
                "price": "45000.00"
            }
            
            price = await client.get_symbol_price("BTCUSDT")
            
            assert price["symbol"] == "BTCUSDT"
            assert float(price["price"]) == 45000.0
    
    @pytest.mark.asyncio
    async def test_binance_orderbook_integration(self):
        """Test Binance orderbook integration."""
        from src.api.binance.client import BinanceClient
        
        client = BinanceClient()
        
        with patch.object(client, '_make_request') as mock_request:
            mock_request.return_value = {
                "lastUpdateId": 123456,
                "bids": [["44900.00", "0.1"], ["44800.00", "0.2"]],
                "asks": [["45100.00", "0.1"], ["45200.00", "0.2"]]
            }
            
            orderbook = await client.get_orderbook("BTCUSDT")
            
            assert "bids" in orderbook
            assert "asks" in orderbook
            assert len(orderbook["bids"]) == 2
            assert len(orderbook["asks"]) == 2
    
    @pytest.mark.asyncio
    async def test_binance_klines_integration(self):
        """Test Binance klines/candlestick data integration."""
        from src.api.binance.client import BinanceClient
        
        client = BinanceClient()
        
        with patch.object(client, '_make_request') as mock_request:
            mock_request.return_value = [
                [
                    1640995200000,  # Open time
                    "44000.00",     # Open
                    "45000.00",     # High
                    "43500.00",     # Low
                    "44500.00",     # Close
                    "100.0",        # Volume
                    1640998800000,  # Close time
                    "4450000.00",   # Quote asset volume
                    1000,           # Number of trades
                    "50.0",         # Taker buy base asset volume
                    "2225000.00",   # Taker buy quote asset volume
                    "0"             # Ignore
                ]
            ]
            
            klines = await client.get_klines("BTCUSDT", "1h")
            
            assert len(klines) == 1
            assert float(klines[0][4]) == 44500.0  # Close price


class TestExternalServiceResilience:
    """Test external service resilience and error handling."""
    
    @pytest.mark.asyncio
    async def test_network_timeout_handling(self):
        """Test handling of network timeouts."""
        async with EnhancedMarketDataProvider() as provider:
            with patch.object(provider.session, 'get') as mock_get:
                mock_get.side_effect = asyncio.TimeoutError("Request timeout")
                
                with pytest.raises(Exception):
                    await provider._request("http://test.com", provider="test")
    
    @pytest.mark.asyncio
    async def test_rate_limit_response_handling(self):
        """Test handling of rate limit responses."""
        async with EnhancedMarketDataProvider() as provider:
            with patch.object(provider.session, 'get') as mock_get:
                # Mock rate limit response
                mock_response = AsyncMock()
                mock_response.status = 429
                mock_response.headers = {"Retry-After": "60"}
                mock_get.return_value.__aenter__.return_value = mock_response
                
                with patch('asyncio.sleep') as mock_sleep:
                    # Should retry after the specified time
                    with pytest.raises(Exception):  # Will fail after retries
                        await provider._request("http://test.com", provider="test")
                    
                    mock_sleep.assert_called()
    
    @pytest.mark.asyncio
    async def test_malformed_json_handling(self):
        """Test handling of malformed JSON responses."""
        async with EnhancedMarketDataProvider() as provider:
            with patch.object(provider.session, 'get') as mock_get:
                mock_response = AsyncMock()
                mock_response.status = 200
                mock_response.json.side_effect = json.JSONDecodeError("Invalid JSON", "", 0)
                mock_get.return_value.__aenter__.return_value = mock_response
                
                with pytest.raises(Exception):
                    await provider._request("http://test.com", provider="test")
    
    @pytest.mark.asyncio
    async def test_service_unavailable_handling(self):
        """Test handling of service unavailable responses."""
        async with EnhancedMarketDataProvider() as provider:
            with patch.object(provider.session, 'get') as mock_get:
                mock_response = AsyncMock()
                mock_response.status = 503
                mock_response.raise_for_status.side_effect = aiohttp.ClientResponseError(
                    request_info=None, history=None, status=503
                )
                mock_get.return_value.__aenter__.return_value = mock_response
                
                with pytest.raises(Exception):
                    await provider._request("http://test.com", provider="test")
    
    @pytest.mark.asyncio
    async def test_connection_error_handling(self):
        """Test handling of connection errors."""
        async with EnhancedMarketDataProvider() as provider:
            with patch.object(provider.session, 'get') as mock_get:
                mock_get.side_effect = aiohttp.ClientConnectionError("Connection failed")
                
                with pytest.raises(Exception):
                    await provider._request("http://test.com", provider="test")


class TestExternalServicePerformance:
    """Test external service performance aspects."""
    
    @pytest.mark.asyncio
    async def test_concurrent_requests(self):
        """Test handling of concurrent requests."""
        async with EnhancedMarketDataProvider() as provider:
            with patch.object(provider, '_request') as mock_request:
                mock_request.return_value = {
                    "bitcoin": {"usd": 45000}
                }
                
                # Make multiple concurrent requests
                tasks = [
                    provider.get_crypto_prices_coingecko(["BTC"])
                    for _ in range(5)
                ]
                
                results = await asyncio.gather(*tasks)
                
                assert len(results) == 5
                assert all(len(result) == 1 for result in results)
    
    @pytest.mark.asyncio
    async def test_large_response_handling(self):
        """Test handling of large responses."""
        async with EnhancedMarketDataProvider() as provider:
            with patch.object(provider, '_request') as mock_request:
                # Mock large response with many coins
                large_response = {
                    f"coin-{i}": {"usd": 100 + i}
                    for i in range(1000)
                }
                mock_request.return_value = large_response
                
                # Should handle large responses without issues
                symbols = [f"COIN{i}" for i in range(1000)]
                result = await provider.get_crypto_prices_coingecko(symbols)
                
                # Response should be processed successfully
                assert isinstance(result, list)
    
    @pytest.mark.asyncio
    async def test_request_batching(self):
        """Test request batching for efficiency."""
        async with EnhancedMarketDataProvider() as provider:
            with patch.object(provider, '_request') as mock_request:
                mock_request.return_value = {
                    "bitcoin": {"usd": 45000},
                    "ethereum": {"usd": 3000}
                }
                
                # Multiple symbols should be batched in single request
                result = await provider.get_crypto_prices_coingecko(["BTC", "ETH"])
                
                # Should make only one request for multiple symbols
                assert mock_request.call_count == 1
                assert len(result) == 2


class TestExternalServiceConfiguration:
    """Test external service configuration and settings."""
    
    @pytest.mark.asyncio
    async def test_api_key_configuration(self):
        """Test API key configuration handling."""
        from src.api.external.news_api import NewsAPI
        
        # Test with API key
        api = NewsAPI(api_key="test_key")
        assert api.api_key == "test_key"
        
        # Test without API key (should use environment variable)
        api = NewsAPI()
        # Should not raise an error and handle gracefully
        assert api is not None
    
    @pytest.mark.asyncio
    async def test_endpoint_configuration(self):
        """Test endpoint configuration."""
        provider = EnhancedMarketDataProvider()
        
        # Check that endpoints are properly configured
        assert provider.coingecko_base == "https://api.coingecko.com/api/v3"
        assert provider.coinpaprika_base == "https://api.coinpaprika.com/v1"
        assert provider.cryptopanic_base == "https://cryptopanic.com/api/free/v1"
    
    @pytest.mark.asyncio
    async def test_timeout_configuration(self):
        """Test timeout configuration."""
        async with EnhancedMarketDataProvider() as provider:
            # Should have proper timeout configured
            assert provider.session.timeout.total == 30
    
    @pytest.mark.asyncio
    async def test_connection_limits(self):
        """Test connection limit configuration."""
        async with EnhancedMarketDataProvider() as provider:
            # Should have proper connection limits
            assert provider.session.connector.limit == 100
