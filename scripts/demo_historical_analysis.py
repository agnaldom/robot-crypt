#!/usr/bin/env python3
"""
Script de demonstra√ß√£o para an√°lise hist√≥rica da Binance.
Mostra como usar o HistoricalDataManager para analisar dados hist√≥ricos
e tomar decis√µes de compra/venda baseadas em an√°lise t√©cnica.
"""

import asyncio
import sys
import os
from datetime import datetime, timedelta
from typing import List

# Adiciona o diret√≥rio src ao path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

from api.binance.client import BinanceClient
from api.binance.historical_data_manager import HistoricalDataManager
from core.logging_setup import logger


async def demo_single_symbol_analysis():
    """Demonstra an√°lise de um s√≠mbolo espec√≠fico."""
    print("üîç AN√ÅLISE HIST√ìRICA DE S√çMBOLO √öNICO")
    print("=" * 50)
    
    # Inicializa o gerenciador
    manager = HistoricalDataManager()
    
    # S√≠mbolo para an√°lise
    symbol = "BTCUSDT"
    
    try:
        # Busca pre√ßo atual
        current_price_data = manager.client.get_ticker_price(symbol)
        current_price = float(current_price_data['price'])
        
        print(f"üìä Analisando {symbol}")
        print(f"üí∞ Pre√ßo atual: ${current_price:,.2f}")
        print()
        
        # An√°lise hist√≥rica de 24 meses
        print("üïê Buscando dados hist√≥ricos (24 meses)...")
        analysis = await manager.analyze_historical_vs_current(
            symbol=symbol,
            current_price=current_price,
            interval="1d",
            months_back=24
        )
        
        # Exibe resultados
        print(f"üìà AN√ÅLISE HIST√ìRICA DE {symbol}")
        print(f"   Pre√ßo atual: ${analysis.current_price:,.2f}")
        print(f"   M√©dia hist√≥rica: ${analysis.historical_avg:,.2f}")
        print(f"   M√°ximo hist√≥rico: ${analysis.historical_max:,.2f}")
        print(f"   M√≠nimo hist√≥rico: ${analysis.historical_min:,.2f}")
        print(f"   Tend√™ncia: {analysis.trend_direction}")
        print(f"   Volatilidade: {analysis.volatility:.2%}")
        print()
        
        # N√≠veis de suporte e resist√™ncia
        print("üéØ N√çVEIS T√âCNICOS:")
        if analysis.support_levels:
            print(f"   Suportes: {[f'${s:,.2f}' for s in analysis.support_levels]}")
        if analysis.resistance_levels:
            print(f"   Resist√™ncias: {[f'${r:,.2f}' for r in analysis.resistance_levels]}")
        print()
        
        # Recomenda√ß√£o
        print("üöÄ RECOMENDA√á√ÉO:")
        print(f"   A√ß√£o: {analysis.recommendation}")
        print(f"   Confian√ßa: {analysis.confidence_score:.1f}%")
        
        # Explica√ß√£o da recomenda√ß√£o
        if analysis.recommendation == "COMPRAR":
            print("   üí° Fatores positivos detectados")
        elif analysis.recommendation == "VENDER":
            print("   ‚ö†Ô∏è Fatores negativos detectados")
        else:
            print("   ü§î Aguardar melhores condi√ß√µes")
        
        print()
        
    except Exception as e:
        print(f"‚ùå Erro na an√°lise: {str(e)}")


async def demo_multiple_symbols_analysis():
    """Demonstra an√°lise de m√∫ltiplos s√≠mbolos."""
    print("üîç AN√ÅLISE DE M√öLTIPLOS S√çMBOLOS")
    print("=" * 50)
    
    # Inicializa o gerenciador
    manager = HistoricalDataManager()
    
    # S√≠mbolos para an√°lise
    symbols = ["BTCUSDT", "ETHUSDT", "BNBUSDT", "ADAUSDT", "SOLUSDT"]
    
    try:
        print(f"üìä Analisando {len(symbols)} s√≠mbolos...")
        print()
        
        # Gera resumo do mercado
        summary = await manager.get_market_summary(symbols)
        
        print(f"üìà RESUMO DO MERCADO - {summary['timestamp'][:19]}")
        print(f"üåç Sentimento geral: {summary['market_sentiment'].upper()}")
        print()
        
        # Exibe an√°lises individuais
        for symbol, data in summary['analyses'].items():
            if 'error' in data:
                print(f"‚ùå {symbol}: Erro - {data['error']}")
                continue
            
            print(f"ü™ô {symbol}:")
            print(f"   Pre√ßo: ${data['current_price']:,.2f}")
            print(f"   Recomenda√ß√£o: {data['recommendation']}")
            print(f"   Confian√ßa: {data['confidence']:.1f}%")
            print(f"   Tend√™ncia: {data['trend']}")
            print(f"   Volatilidade: {data['volatility']:.2%}")
            print()
        
        # Estat√≠sticas gerais
        recommendations = [data.get('recommendation', 'ERRO') for data in summary['analyses'].values() if 'recommendation' in data]
        buy_count = recommendations.count('COMPRAR')
        sell_count = recommendations.count('VENDER')
        wait_count = recommendations.count('AGUARDAR')
        
        print("üìä ESTAT√çSTICAS:")
        print(f"   Comprar: {buy_count} s√≠mbolos")
        print(f"   Vender: {sell_count} s√≠mbolos")
        print(f"   Aguardar: {wait_count} s√≠mbolos")
        print()
        
    except Exception as e:
        print(f"‚ùå Erro na an√°lise: {str(e)}")


async def demo_historical_data_fetch():
    """Demonstra busca de dados hist√≥ricos."""
    print("üîç BUSCA DE DADOS HIST√ìRICOS")
    print("=" * 50)
    
    # Inicializa o gerenciador
    manager = HistoricalDataManager()
    
    symbol = "BTCUSDT"
    
    try:
        print(f"üìä Buscando hist√≥rico de {symbol}...")
        
        # Busca dados hist√≥ricos
        historical_data = await manager.fetch_historical_data(
            symbol=symbol,
            interval="1d",
            months_back=12,  # 12 meses
            force_refresh=False  # Usa cache se dispon√≠vel
        )
        
        print(f"üìà Dados coletados: {len(historical_data)} registros")
        print()
        
        # Mostra alguns pontos de dados
        print("üìÖ AMOSTRAS DE DADOS (√∫ltimos 5 dias):")
        for data in historical_data[-5:]:
            date = datetime.fromtimestamp(data['open_time'] / 1000)
            print(f"   {date.strftime('%Y-%m-%d')}: Open=${data['open']:,.2f}, High=${data['high']:,.2f}, Low=${data['low']:,.2f}, Close=${data['close']:,.2f}")
        
        print()
        
        # Estat√≠sticas b√°sicas
        prices = [float(d['close']) for d in historical_data]
        print("üìä ESTAT√çSTICAS B√ÅSICAS:")
        print(f"   Pre√ßo m√©dio: ${sum(prices) / len(prices):,.2f}")
        print(f"   Pre√ßo m√°ximo: ${max(prices):,.2f}")
        print(f"   Pre√ßo m√≠nimo: ${min(prices):,.2f}")
        print(f"   Varia√ß√£o: {((max(prices) - min(prices)) / min(prices)) * 100:.1f}%")
        print()
        
    except Exception as e:
        print(f"‚ùå Erro ao buscar dados: {str(e)}")


async def demo_trend_analysis():
    """Demonstra an√°lise de tend√™ncia."""
    print("üîç AN√ÅLISE DE TEND√äNCIA")
    print("=" * 50)
    
    # Inicializa o gerenciador
    manager = HistoricalDataManager()
    
    symbols = ["BTCUSDT", "ETHUSDT", "BNBUSDT"]
    
    try:
        for symbol in symbols:
            print(f"üìä Analisando tend√™ncia de {symbol}...")
            
            # Busca pre√ßo atual
            current_price_data = manager.client.get_ticker_price(symbol)
            current_price = float(current_price_data['price'])
            
            # An√°lise de diferentes per√≠odos
            periods = [
                (3, "3 meses"),
                (6, "6 meses"),
                (12, "12 meses"),
                (24, "24 meses")
            ]
            
            for months, period_name in periods:
                try:
                    analysis = await manager.analyze_historical_vs_current(
                        symbol=symbol,
                        current_price=current_price,
                        interval="1d",
                        months_back=months
                    )
                    
                    print(f"   {period_name}: {analysis.trend_direction} (Confian√ßa: {analysis.confidence_score:.1f}%)")
                    
                except Exception as e:
                    print(f"   {period_name}: Erro - {str(e)}")
            
            print()
            
    except Exception as e:
        print(f"‚ùå Erro na an√°lise: {str(e)}")


async def demo_backtesting_opportunity():
    """Demonstra oportunidade de backtesting."""
    print("üîç OPORTUNIDADE DE BACKTESTING")
    print("=" * 50)
    
    # Inicializa o gerenciador
    manager = HistoricalDataManager()
    
    symbol = "BTCUSDT"
    
    try:
        print(f"üìä Simulando estrat√©gia para {symbol}...")
        
        # Busca dados hist√≥ricos
        historical_data = await manager.fetch_historical_data(
            symbol=symbol,
            interval="1d",
            months_back=12
        )
        
        # Simula estrat√©gia simples: compra quando pre√ßo < m√©dia m√≥vel 20, vende quando > m√©dia m√≥vel 20
        buy_signals = []
        sell_signals = []
        
        for i in range(20, len(historical_data)):
            # Calcula m√©dia m√≥vel de 20 dias
            ma20 = sum(float(d['close']) for d in historical_data[i-20:i]) / 20
            current_price = float(historical_data[i]['close'])
            prev_price = float(historical_data[i-1]['close'])
            prev_ma20 = sum(float(d['close']) for d in historical_data[i-21:i-1]) / 20
            
            # Sinal de compra: pre√ßo cruza acima da MA20
            if prev_price <= prev_ma20 and current_price > ma20:
                buy_signals.append({
                    'date': datetime.fromtimestamp(historical_data[i]['open_time'] / 1000),
                    'price': current_price,
                    'ma20': ma20
                })
            
            # Sinal de venda: pre√ßo cruza abaixo da MA20
            elif prev_price >= prev_ma20 and current_price < ma20:
                sell_signals.append({
                    'date': datetime.fromtimestamp(historical_data[i]['open_time'] / 1000),
                    'price': current_price,
                    'ma20': ma20
                })
        
        print(f"üìà Sinais de compra encontrados: {len(buy_signals)}")
        print(f"üìâ Sinais de venda encontrados: {len(sell_signals)}")
        print()
        
        # Mostra √∫ltimos sinais
        if buy_signals:
            print("üîµ √öLTIMOS SINAIS DE COMPRA:")
            for signal in buy_signals[-3:]:
                print(f"   {signal['date'].strftime('%Y-%m-%d')}: ${signal['price']:,.2f} (MA20: ${signal['ma20']:,.2f})")
        
        if sell_signals:
            print("üî¥ √öLTIMOS SINAIS DE VENDA:")
            for signal in sell_signals[-3:]:
                print(f"   {signal['date'].strftime('%Y-%m-%d')}: ${signal['price']:,.2f} (MA20: ${signal['ma20']:,.2f})")
        
        print()
        print("üí° Esta √© uma estrat√©gia b√°sica. Voc√™ pode implementar estrat√©gias mais complexas!")
        print()
        
    except Exception as e:
        print(f"‚ùå Erro no backtesting: {str(e)}")


async def main():
    """Fun√ß√£o principal que executa todas as demonstra√ß√µes."""
    print("üöÄ DEMONSTRA√á√ÉO DE AN√ÅLISE HIST√ìRICA DA BINANCE")
    print("=" * 60)
    print()
    
    # Lista de demonstra√ß√µes
    demos = [
        ("An√°lise de S√≠mbolo √önico", demo_single_symbol_analysis),
        ("Busca de Dados Hist√≥ricos", demo_historical_data_fetch),
        ("An√°lise de M√∫ltiplos S√≠mbolos", demo_multiple_symbols_analysis),
        ("An√°lise de Tend√™ncia", demo_trend_analysis),
        ("Oportunidade de Backtesting", demo_backtesting_opportunity),
    ]
    
    for i, (title, demo_func) in enumerate(demos, 1):
        print(f"üìã {i}. {title}")
        print()
        
        try:
            await demo_func()
        except Exception as e:
            print(f"‚ùå Erro na demonstra√ß√£o: {str(e)}")
        
        print("-" * 60)
        print()
        
        # Pausa entre demonstra√ß√µes
        if i < len(demos):
            print("‚è≥ Aguardando 3 segundos...")
            await asyncio.sleep(3)
    
    print("‚úÖ Demonstra√ß√£o conclu√≠da!")
    print()
    print("üí° PR√ìXIMOS PASSOS:")
    print("   1. Integre esta an√°lise no seu rob√¥ de trading")
    print("   2. Configure alertas baseados nas recomenda√ß√µes")
    print("   3. Implemente estrat√©gias de backtesting")
    print("   4. Monitore o desempenho das decis√µes")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã Demonstra√ß√£o interrompida pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro fatal: {str(e)}")
        sys.exit(1)
