#!/usr/bin/env python3
"""
Script para integrar an√°lise hist√≥rica com o rob√¥ de trading existente.
Demonstra como usar os dados hist√≥ricos da Binance para melhorar as decis√µes de trading.
"""

import asyncio
import sys
import os
import json
from datetime import datetime, timedelta
from typing import List, Dict, Any

# Adiciona o diret√≥rio src ao path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

from api.binance.client import BinanceClient
from api.binance.historical_data_manager import HistoricalDataManager
from strategies.historical_enhanced_strategy import HistoricalEnhancedStrategy
from core.logging_setup import logger


class HistoricalTradingBot:
    """
    Bot de trading aprimorado com an√°lise hist√≥rica.
    Integra dados hist√≥ricos da Binance para tomar decis√µes mais informadas.
    """
    
    def __init__(self):
        """Inicializa o bot com an√°lise hist√≥rica."""
        self.binance_client = BinanceClient()
        self.historical_manager = HistoricalDataManager(self.binance_client)
        self.strategy = HistoricalEnhancedStrategy(self.binance_client)
        
        # S√≠mbolos para monitorar
        self.symbols = [
            "BTCUSDT", "ETHUSDT", "BNBUSDT", "ADAUSDT", "SOLUSDT",
            "DOTUSDT", "MATICUSDT", "LINKUSDT", "AVAXUSDT", "ATOMUSDT"
        ]
        
        # Configura√ß√µes
        self.min_confidence = 75.0  # Confian√ßa m√≠nima para executar trades
        self.analysis_interval = 300  # An√°lise a cada 5 minutos
        self.report_interval = 3600  # Relat√≥rio a cada hora
        
        # Estado do bot
        self.running = False
        self.last_analysis = None
        self.last_report = None
        
    async def start(self):
        """Inicia o bot de trading."""
        print("üöÄ Iniciando Bot de Trading com An√°lise Hist√≥rica")
        print("=" * 60)
        
        self.running = True
        
        try:
            # Inicializa√ß√£o
            await self.initialize_historical_data()
            
            # Loop principal
            while self.running:
                await self.run_analysis_cycle()
                await asyncio.sleep(60)  # Verifica a cada minuto
                
        except KeyboardInterrupt:
            print("\nüëã Bot interrompido pelo usu√°rio")
        except Exception as e:
            print(f"\n‚ùå Erro fatal: {str(e)}")
            logger.error(f"Erro fatal no bot: {str(e)}")
        finally:
            self.running = False
            print("üõë Bot finalizado")
    
    async def initialize_historical_data(self):
        """Inicializa dados hist√≥ricos para os s√≠mbolos principais."""
        print("üìä Inicializando dados hist√≥ricos...")
        
        for symbol in self.symbols[:3]:  # Inicializa s√≥ os 3 primeiros para n√£o demorar
            try:
                print(f"   Carregando hist√≥rico de {symbol}...")
                await self.historical_manager.fetch_historical_data(
                    symbol=symbol,
                    interval="1d",
                    months_back=12,
                    force_refresh=False
                )
                print(f"   ‚úÖ {symbol} carregado")
                
            except Exception as e:
                print(f"   ‚ùå Erro ao carregar {symbol}: {str(e)}")
        
        print("‚úÖ Inicializa√ß√£o conclu√≠da")
        print()
    
    async def run_analysis_cycle(self):
        """Executa um ciclo de an√°lise."""
        current_time = datetime.now()
        
        # An√°lise de oportunidades
        if (self.last_analysis is None or 
            current_time - self.last_analysis > timedelta(seconds=self.analysis_interval)):
            
            await self.analyze_market_opportunities()
            self.last_analysis = current_time
        
        # Relat√≥rio detalhado
        if (self.last_report is None or 
            current_time - self.last_report > timedelta(seconds=self.report_interval)):
            
            await self.generate_detailed_report()
            self.last_report = current_time
    
    async def analyze_market_opportunities(self):
        """Analisa oportunidades de mercado."""
        print(f"üîç Analisando oportunidades - {datetime.now().strftime('%H:%M:%S')}")
        
        try:
            # Escaneia oportunidades
            opportunities = await self.strategy.scan_market_opportunities(
                symbols=self.symbols,
                min_confidence=self.min_confidence
            )
            
            if opportunities:
                print(f"üéØ {len(opportunities)} oportunidades encontradas:")
                
                for i, signal in enumerate(opportunities[:5], 1):  # Mostra top 5
                    print(f"   {i}. {signal.symbol}: {signal.action}")
                    print(f"      Confian√ßa: {signal.confidence:.1f}%")
                    print(f"      Pre√ßo: ${signal.current_price:,.2f}")
                    print(f"      Stop Loss: ${signal.stop_loss:,.2f}")
                    print(f"      Take Profit: ${signal.take_profit:,.2f}")
                    
                    # Mostra principal raz√£o
                    if signal.reasoning:
                        print(f"      Raz√£o: {signal.reasoning[0]}")
                    print()
                
                # Aqui voc√™ pode integrar com a execu√ß√£o real de trades
                # Por exemplo:
                # await self.execute_trades(opportunities)
                
            else:
                print("   Nenhuma oportunidade encontrada no momento")
            
        except Exception as e:
            print(f"‚ùå Erro na an√°lise: {str(e)}")
            logger.error(f"Erro na an√°lise de oportunidades: {str(e)}")
    
    async def generate_detailed_report(self):
        """Gera relat√≥rio detalhado do mercado."""
        print("üìà Gerando relat√≥rio detalhado...")
        
        try:
            report = await self.strategy.generate_market_report(self.symbols)
            
            # Salva relat√≥rio
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            report_file = f"market_report_{timestamp}.json"
            
            with open(report_file, 'w') as f:
                json.dump(report, f, indent=2, default=str)
            
            # Mostra resumo
            summary = report['market_summary']
            print(f"üìä RESUMO DO MERCADO:")
            print(f"   Altista: {summary['bullish_count']} s√≠mbolos")
            print(f"   Baixista: {summary['bearish_count']} s√≠mbolos")
            print(f"   Neutro: {summary['neutral_count']} s√≠mbolos")
            print(f"   Confian√ßa m√©dia: {summary['avg_confidence']:.1f}%")
            print(f"   Oportunidades: {len(report['opportunities'])}")
            print(f"   Relat√≥rio salvo: {report_file}")
            print()
            
        except Exception as e:
            print(f"‚ùå Erro ao gerar relat√≥rio: {str(e)}")
            logger.error(f"Erro ao gerar relat√≥rio: {str(e)}")
    
    async def execute_trades(self, opportunities: List):
        """
        Executa trades baseados nas oportunidades.
        ATEN√á√ÉO: Esta √© uma vers√£o simulada!
        """
        print("‚ö†Ô∏è  SIMULA√á√ÉO DE EXECU√á√ÉO DE TRADES")
        print("    (N√£o executando trades reais)")
        
        for signal in opportunities[:3]:  # Executa apenas top 3
            print(f"   Simulando {signal.action} para {signal.symbol}")
            print(f"   Confian√ßa: {signal.confidence:.1f}%")
            print(f"   Pre√ßo de entrada: ${signal.entry_price:,.2f}")
            
            # Aqui voc√™ integraria com a execu√ß√£o real:
            # if signal.action == "BUY":
            #     await self.execute_buy_order(signal)
            # elif signal.action == "SELL":
            #     await self.execute_sell_order(signal)
    
    async def execute_buy_order(self, signal):
        """Executa ordem de compra (exemplo)."""
        # Implementa√ß√£o exemplo - N√ÉO USE EM PRODU√á√ÉO SEM AJUSTES
        try:
            # Calcula quantidade baseada no risco
            risk_amount = 100.0  # $100 por trade
            quantity = risk_amount / signal.current_price
            
            # order = self.binance_client.create_order(
            #     symbol=signal.symbol,
            #     side='BUY',
            #     order_type='LIMIT',
            #     quantity=quantity,
            #     price=signal.entry_price
            # )
            
            print(f"‚úÖ Ordem de compra simulada para {signal.symbol}")
            
        except Exception as e:
            print(f"‚ùå Erro ao executar compra: {str(e)}")
    
    async def execute_sell_order(self, signal):
        """Executa ordem de venda (exemplo)."""
        # Similar ao execute_buy_order
        print(f"‚úÖ Ordem de venda simulada para {signal.symbol}")
    
    def stop(self):
        """Para o bot."""
        self.running = False


async def demo_integration():
    """Demonstra a integra√ß√£o completa."""
    print("üîß DEMONSTRA√á√ÉO DE INTEGRA√á√ÉO")
    print("=" * 50)
    
    strategy = HistoricalEnhancedStrategy()
    
    # Teste com um s√≠mbolo
    symbol = "BTCUSDT"
    
    try:
        print(f"üìä Testando an√°lise integrada para {symbol}...")
        
        # An√°lise com contexto hist√≥rico
        signal = await strategy.analyze_symbol_with_history(
            symbol=symbol,
            timeframe="1d",
            months_back=12
        )
        
        print(f"üéØ RESULTADO DA AN√ÅLISE:")
        print(f"   S√≠mbolo: {signal.symbol}")
        print(f"   A√ß√£o: {signal.action}")
        print(f"   Confian√ßa: {signal.confidence:.1f}%")
        print(f"   Pre√ßo atual: ${signal.current_price:,.2f}")
        print(f"   Entrada: ${signal.entry_price:,.2f}")
        print(f"   Stop Loss: ${signal.stop_loss:,.2f}")
        print(f"   Take Profit: ${signal.take_profit:,.2f}")
        print()
        
        print("üìù RACIOC√çNIO:")
        for i, reason in enumerate(signal.reasoning, 1):
            print(f"   {i}. {reason}")
        print()
        
        print("üìä CONTEXTO HIST√ìRICO:")
        ctx = signal.historical_context
        print(f"   Pre√ßo m√©dio hist√≥rico: ${ctx['avg_price']:,.2f}")
        print(f"   M√°ximo hist√≥rico: ${ctx['max_price']:,.2f}")
        print(f"   M√≠nimo hist√≥rico: ${ctx['min_price']:,.2f}")
        print(f"   Volatilidade: {ctx['volatility']:.2%}")
        print(f"   Tend√™ncia: {ctx['trend']}")
        print(f"   Varia√ß√£o vs m√©dia: {ctx['price_vs_avg_pct']:.1f}%")
        print()
        
        # C√°lculo de risco/retorno
        if signal.action != "HOLD":
            potential_return = strategy._calculate_potential_return(signal)
            risk_reward = strategy._calculate_risk_reward_ratio(signal)
            
            print("üí∞ AN√ÅLISE DE RISCO/RETORNO:")
            print(f"   Retorno potencial: {potential_return:.2f}%")
            print(f"   Rela√ß√£o risco/retorno: 1:{risk_reward:.2f}")
            print()
        
        print("‚úÖ Integra√ß√£o funcionando perfeitamente!")
        
    except Exception as e:
        print(f"‚ùå Erro na demonstra√ß√£o: {str(e)}")


async def main():
    """Fun√ß√£o principal."""
    print("üöÄ INTEGRA√á√ÉO DE AN√ÅLISE HIST√ìRICA COM ROB√î DE TRADING")
    print("=" * 70)
    print()
    
    # Op√ß√µes
    print("Escolha uma op√ß√£o:")
    print("1. Demonstra√ß√£o de integra√ß√£o")
    print("2. Executar bot completo (simula√ß√£o)")
    print("3. An√°lise √∫nica de s√≠mbolo")
    print()
    
    choice = input("Digite sua escolha (1-3): ").strip()
    
    if choice == "1":
        await demo_integration()
    
    elif choice == "2":
        print("‚ö†Ô∏è  MODO SIMULA√á√ÉO - Nenhum trade real ser√° executado")
        print()
        
        bot = HistoricalTradingBot()
        await bot.start()
    
    elif choice == "3":
        symbol = input("Digite o s√≠mbolo (ex: BTCUSDT): ").strip().upper()
        
        if symbol:
            strategy = HistoricalEnhancedStrategy()
            
            try:
                signal = await strategy.analyze_symbol_with_history(symbol)
                
                print(f"\nüìä AN√ÅLISE DE {symbol}:")
                print(f"   Recomenda√ß√£o: {signal.action}")
                print(f"   Confian√ßa: {signal.confidence:.1f}%")
                print(f"   Pre√ßo atual: ${signal.current_price:,.2f}")
                
                if signal.reasoning:
                    print(f"   Principal raz√£o: {signal.reasoning[0]}")
                
            except Exception as e:
                print(f"‚ùå Erro na an√°lise: {str(e)}")
        else:
            print("‚ùå S√≠mbolo n√£o informado")
    
    else:
        print("‚ùå Op√ß√£o inv√°lida")
    
    print("\n" + "=" * 70)
    print("üí° PR√ìXIMOS PASSOS PARA IMPLEMENTA√á√ÉO:")
    print("   1. Configure suas chaves da API Binance")
    print("   2. Ajuste os par√¢metros de risco no c√≥digo")
    print("   3. Teste em ambiente de simula√ß√£o")
    print("   4. Implemente notifica√ß√µes (Telegram, email)")
    print("   5. Configure monitoramento 24/7")
    print("   6. Implemente gest√£o de risco avan√ßada")
    print()
    print("‚ö†Ô∏è  IMPORTANTE: Sempre teste em ambiente de simula√ß√£o antes de usar com dinheiro real!")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã Programa interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro fatal: {str(e)}")
        sys.exit(1)
