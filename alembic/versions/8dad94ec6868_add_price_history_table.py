"""add_price_history_table

Revision ID: 8dad94ec6868
Revises: 609f0515406e
Create Date: 2025-07-08 00:29:00.038063

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '8dad94ec6868'
down_revision = '609f0515406e'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('notifications')
    op.drop_index(op.f('idx_trading_logs_timestamp'), table_name='trading_logs')
    op.drop_index(op.f('idx_trading_logs_type'), table_name='trading_logs')
    op.drop_table('trading_logs')
    op.drop_table('periodic_stats')
    op.drop_table('performance_metrics')
    op.drop_index(op.f('idx_market_data_symbol_timestamp'), table_name='market_data')
    op.drop_table('market_data')
    op.drop_table('system_health')
    op.drop_table('market_analysis')
    op.drop_index(op.f('idx_asset_balances_snapshot_date'), table_name='asset_balances')
    op.drop_index(op.f('idx_asset_balances_updated_at'), table_name='asset_balances')
    op.drop_index(op.f('idx_asset_balances_usdt_value'), table_name='asset_balances')
    op.drop_index(op.f('idx_asset_balances_user_asset'), table_name='asset_balances')
    op.drop_table('asset_balances')
    op.drop_index(op.f('idx_model_performance_name'), table_name='model_performance')
    op.drop_table('model_performance')
    op.drop_table('transaction_history')
    op.drop_table('app_state')
    op.drop_table('daily_performance')
    op.drop_table('trading_signals')
    op.drop_table('drawdowns')
    op.drop_table('capital_history')
    op.alter_column('price_history', 'open_price',
               existing_type=sa.NUMERIC(precision=18, scale=8),
               type_=sa.Float(),
               existing_nullable=False)
    op.alter_column('price_history', 'high_price',
               existing_type=sa.NUMERIC(precision=18, scale=8),
               type_=sa.Float(),
               existing_nullable=False)
    op.alter_column('price_history', 'low_price',
               existing_type=sa.NUMERIC(precision=18, scale=8),
               type_=sa.Float(),
               existing_nullable=False)
    op.alter_column('price_history', 'close_price',
               existing_type=sa.NUMERIC(precision=18, scale=8),
               type_=sa.Float(),
               existing_nullable=False)
    op.alter_column('price_history', 'volume',
               existing_type=sa.NUMERIC(precision=24, scale=8),
               type_=sa.Float(),
               existing_nullable=False)
    op.alter_column('price_history', 'quote_asset_volume',
               existing_type=sa.NUMERIC(precision=24, scale=8),
               type_=sa.Float(),
               existing_nullable=True)
    op.alter_column('price_history', 'taker_buy_base_volume',
               existing_type=sa.NUMERIC(precision=24, scale=8),
               type_=sa.Float(),
               existing_nullable=True)
    op.alter_column('price_history', 'taker_buy_quote_volume',
               existing_type=sa.NUMERIC(precision=24, scale=8),
               type_=sa.Float(),
               existing_nullable=True)
    op.alter_column('price_history', 'timestamp',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.create_index(op.f('ix_price_history_id'), 'price_history', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_price_history_id'), table_name='price_history')
    op.alter_column('price_history', 'timestamp',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('price_history', 'taker_buy_quote_volume',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=24, scale=8),
               existing_nullable=True)
    op.alter_column('price_history', 'taker_buy_base_volume',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=24, scale=8),
               existing_nullable=True)
    op.alter_column('price_history', 'quote_asset_volume',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=24, scale=8),
               existing_nullable=True)
    op.alter_column('price_history', 'volume',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=24, scale=8),
               existing_nullable=False)
    op.alter_column('price_history', 'close_price',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=18, scale=8),
               existing_nullable=False)
    op.alter_column('price_history', 'low_price',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=18, scale=8),
               existing_nullable=False)
    op.alter_column('price_history', 'high_price',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=18, scale=8),
               existing_nullable=False)
    op.alter_column('price_history', 'open_price',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=18, scale=8),
               existing_nullable=False)
    op.create_table('capital_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('balance', sa.NUMERIC(precision=18, scale=8), autoincrement=False, nullable=False),
    sa.Column('change_amount', sa.NUMERIC(precision=18, scale=8), autoincrement=False, nullable=True),
    sa.Column('change_percentage', sa.NUMERIC(precision=8, scale=4), autoincrement=False, nullable=True),
    sa.Column('trade_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('event_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('capital_history_pkey'))
    )
    op.create_table('drawdowns',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('start_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('end_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('starting_balance', sa.NUMERIC(precision=18, scale=2), autoincrement=False, nullable=False),
    sa.Column('lowest_balance', sa.NUMERIC(precision=18, scale=2), autoincrement=False, nullable=False),
    sa.Column('recovery_balance', sa.NUMERIC(precision=18, scale=2), autoincrement=False, nullable=True),
    sa.Column('drawdown_amount', sa.NUMERIC(precision=18, scale=2), autoincrement=False, nullable=False),
    sa.Column('drawdown_percentage', sa.NUMERIC(precision=8, scale=4), autoincrement=False, nullable=False),
    sa.Column('duration_minutes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('duration_days', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('recovery_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('recovery_duration_minutes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('recovery_duration_days', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('trades_during_drawdown', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('market_conditions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('drawdowns_pkey'))
    )
    op.create_table('trading_signals',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('symbol', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('signal_type', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('strength', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=False),
    sa.Column('price', sa.NUMERIC(precision=18, scale=8), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('source', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('executed', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('execution_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('execution_price', sa.NUMERIC(precision=18, scale=8), autoincrement=False, nullable=True),
    sa.Column('execution_success', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('reasoning', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('indicators_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('confidence_score', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('trading_signals_pkey'))
    )
    op.create_table('daily_performance',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('starting_balance', sa.NUMERIC(precision=18, scale=2), autoincrement=False, nullable=False),
    sa.Column('ending_balance', sa.NUMERIC(precision=18, scale=2), autoincrement=False, nullable=False),
    sa.Column('total_trades', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('winning_trades', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('losing_trades', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('profit_loss', sa.NUMERIC(precision=18, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('profit_loss_percentage', sa.NUMERIC(precision=8, scale=4), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('largest_win', sa.NUMERIC(precision=18, scale=2), autoincrement=False, nullable=True),
    sa.Column('largest_loss', sa.NUMERIC(precision=18, scale=2), autoincrement=False, nullable=True),
    sa.Column('avg_win', sa.NUMERIC(precision=18, scale=2), autoincrement=False, nullable=True),
    sa.Column('avg_loss', sa.NUMERIC(precision=18, scale=2), autoincrement=False, nullable=True),
    sa.Column('win_rate', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('avg_profit_per_trade', sa.NUMERIC(precision=8, scale=4), autoincrement=False, nullable=True),
    sa.Column('avg_loss_per_trade', sa.NUMERIC(precision=8, scale=4), autoincrement=False, nullable=True),
    sa.Column('drawdown', sa.NUMERIC(precision=8, scale=4), autoincrement=False, nullable=True),
    sa.Column('metrics_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('daily_performance_pkey')),
    sa.UniqueConstraint('date', name=op.f('daily_performance_date_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('app_state',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('state_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('strategy_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('active_pairs', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('open_positions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('config_settings', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('last_check_timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('stats', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('app_state_pkey'))
    )
    op.create_table('transaction_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('symbol', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('operation_type', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('entry_price', sa.NUMERIC(precision=18, scale=8), autoincrement=False, nullable=False),
    sa.Column('exit_price', sa.NUMERIC(precision=18, scale=8), autoincrement=False, nullable=True),
    sa.Column('quantity', sa.NUMERIC(precision=18, scale=8), autoincrement=False, nullable=False),
    sa.Column('volume', sa.NUMERIC(precision=18, scale=8), autoincrement=False, nullable=False),
    sa.Column('profit_loss', sa.NUMERIC(precision=18, scale=8), autoincrement=False, nullable=True),
    sa.Column('profit_loss_percentage', sa.NUMERIC(precision=8, scale=4), autoincrement=False, nullable=True),
    sa.Column('entry_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('exit_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('duration_minutes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('strategy_used', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('strategy_type', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('stop_loss', sa.NUMERIC(precision=18, scale=8), autoincrement=False, nullable=True),
    sa.Column('take_profit', sa.NUMERIC(precision=18, scale=8), autoincrement=False, nullable=True),
    sa.Column('fees', sa.NUMERIC(precision=18, scale=8), autoincrement=False, nullable=True),
    sa.Column('balance_before', sa.NUMERIC(precision=18, scale=8), autoincrement=False, nullable=True),
    sa.Column('balance_after', sa.NUMERIC(precision=18, scale=8), autoincrement=False, nullable=True),
    sa.Column('trade_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('risk_percentage', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('market_condition', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('indicators_at_entry', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('indicators_at_exit', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('additional_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('transaction_history_pkey'))
    )
    op.create_table('model_performance',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('model_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('model_version', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('dataset_size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('accuracy', sa.NUMERIC(precision=8, scale=6), autoincrement=False, nullable=True),
    sa.Column('precision_score', sa.NUMERIC(precision=8, scale=6), autoincrement=False, nullable=True),
    sa.Column('recall_score', sa.NUMERIC(precision=8, scale=6), autoincrement=False, nullable=True),
    sa.Column('f1_score', sa.NUMERIC(precision=8, scale=6), autoincrement=False, nullable=True),
    sa.Column('roc_auc', sa.NUMERIC(precision=8, scale=6), autoincrement=False, nullable=True),
    sa.Column('cv_mean', sa.NUMERIC(precision=8, scale=6), autoincrement=False, nullable=True),
    sa.Column('cv_std', sa.NUMERIC(precision=8, scale=6), autoincrement=False, nullable=True),
    sa.Column('training_time', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('symbols', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('training_period_days', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('model_path', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metrics_json', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('model_performance_pkey'))
    )
    op.create_index(op.f('idx_model_performance_name'), 'model_performance', ['model_name'], unique=False)
    op.create_table('asset_balances',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('asset', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('free', sa.NUMERIC(precision=24, scale=8), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('locked', sa.NUMERIC(precision=24, scale=8), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('total', sa.NUMERIC(precision=24, scale=8), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('usdt_value', sa.NUMERIC(precision=24, scale=8), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('brl_value', sa.NUMERIC(precision=24, scale=8), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('total_balance_usdt', sa.NUMERIC(precision=24, scale=8), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('total_balance_brl', sa.NUMERIC(precision=24, scale=8), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('percentage_of_portfolio', sa.NUMERIC(precision=8, scale=4), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('avg_cost_usdt', sa.NUMERIC(precision=24, scale=8), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('unrealized_pnl', sa.NUMERIC(precision=24, scale=8), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('unrealized_pnl_percentage', sa.NUMERIC(precision=8, scale=4), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('market_price_usdt', sa.NUMERIC(precision=24, scale=8), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('last_price_update', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('snapshot_date', sa.DATE(), server_default=sa.text('CURRENT_DATE'), autoincrement=False, nullable=False),
    sa.Column('source', sa.VARCHAR(length=50), server_default=sa.text("'binance'::character varying"), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('asset_balances_pkey')),
    sa.UniqueConstraint('user_id', 'asset', 'snapshot_date', name=op.f('asset_balances_user_id_asset_snapshot_date_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_asset_balances_user_asset'), 'asset_balances', ['user_id', 'asset'], unique=False)
    op.create_index(op.f('idx_asset_balances_usdt_value'), 'asset_balances', [sa.literal_column('usdt_value DESC')], unique=False)
    op.create_index(op.f('idx_asset_balances_updated_at'), 'asset_balances', ['updated_at'], unique=False)
    op.create_index(op.f('idx_asset_balances_snapshot_date'), 'asset_balances', ['snapshot_date'], unique=False)
    op.create_table('market_analysis',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('symbol', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('analysis_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('market_analysis_pkey'))
    )
    op.create_table('system_health',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('cpu_usage', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=False),
    sa.Column('memory_usage', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=False),
    sa.Column('disk_usage', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=False),
    sa.Column('api_latency', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('active_processes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('errors_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('additional_metrics', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('system_health_pkey'))
    )
    op.create_table('market_data',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('symbol', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('open_price', sa.NUMERIC(precision=20, scale=8), autoincrement=False, nullable=False),
    sa.Column('high_price', sa.NUMERIC(precision=20, scale=8), autoincrement=False, nullable=False),
    sa.Column('low_price', sa.NUMERIC(precision=20, scale=8), autoincrement=False, nullable=False),
    sa.Column('close_price', sa.NUMERIC(precision=20, scale=8), autoincrement=False, nullable=False),
    sa.Column('volume', sa.NUMERIC(precision=24, scale=8), autoincrement=False, nullable=False),
    sa.Column('interval', sa.VARCHAR(length=10), server_default=sa.text("'1h'::character varying"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('market_data_pkey')),
    sa.UniqueConstraint('symbol', 'timestamp', 'interval', name=op.f('market_data_symbol_timestamp_interval_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_market_data_symbol_timestamp'), 'market_data', ['symbol', 'timestamp'], unique=False)
    op.create_table('performance_metrics',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('period_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('total_trades', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('winning_trades', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('losing_trades', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('win_rate', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('initial_capital', sa.NUMERIC(precision=18, scale=2), autoincrement=False, nullable=False),
    sa.Column('final_capital', sa.NUMERIC(precision=18, scale=2), autoincrement=False, nullable=False),
    sa.Column('profit_loss', sa.NUMERIC(precision=18, scale=2), autoincrement=False, nullable=False),
    sa.Column('profit_loss_percentage', sa.NUMERIC(precision=8, scale=4), autoincrement=False, nullable=False),
    sa.Column('avg_profit_per_trade', sa.NUMERIC(precision=8, scale=4), autoincrement=False, nullable=True),
    sa.Column('avg_loss_per_trade', sa.NUMERIC(precision=8, scale=4), autoincrement=False, nullable=True),
    sa.Column('profit_factor', sa.NUMERIC(precision=8, scale=4), autoincrement=False, nullable=True),
    sa.Column('max_consecutive_wins', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('max_consecutive_losses', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('max_drawdown', sa.NUMERIC(precision=8, scale=4), autoincrement=False, nullable=True),
    sa.Column('max_drawdown_percentage', sa.NUMERIC(precision=8, scale=4), autoincrement=False, nullable=True),
    sa.Column('recovery_factor', sa.NUMERIC(precision=8, scale=4), autoincrement=False, nullable=True),
    sa.Column('sharpe_ratio', sa.NUMERIC(precision=8, scale=4), autoincrement=False, nullable=True),
    sa.Column('sortino_ratio', sa.NUMERIC(precision=8, scale=4), autoincrement=False, nullable=True),
    sa.Column('calmar_ratio', sa.NUMERIC(precision=8, scale=4), autoincrement=False, nullable=True),
    sa.Column('avg_trade_duration', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('best_symbol', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('worst_symbol', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('performance_metrics_pkey')),
    sa.UniqueConstraint('period_type', 'start_date', 'end_date', name=op.f('performance_metrics_period_type_start_date_end_date_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('periodic_stats',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('period_type', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('period_start', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('period_end', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('starting_balance', sa.NUMERIC(precision=18, scale=2), autoincrement=False, nullable=False),
    sa.Column('ending_balance', sa.NUMERIC(precision=18, scale=2), autoincrement=False, nullable=False),
    sa.Column('total_trades', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('winning_trades', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('losing_trades', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('profit_loss', sa.NUMERIC(precision=18, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('profit_loss_percentage', sa.NUMERIC(precision=8, scale=4), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('win_rate', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('max_drawdown', sa.NUMERIC(precision=8, scale=4), autoincrement=False, nullable=True),
    sa.Column('sharpe_ratio', sa.NUMERIC(precision=8, scale=4), autoincrement=False, nullable=True),
    sa.Column('additional_metrics', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('periodic_stats_pkey')),
    sa.UniqueConstraint('period_type', 'period_start', name=op.f('periodic_stats_period_type_period_start_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('trading_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('log_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('details', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('level', sa.VARCHAR(length=20), server_default=sa.text("'INFO'::character varying"), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('trading_logs_pkey'))
    )
    op.create_index(op.f('idx_trading_logs_type'), 'trading_logs', ['log_type'], unique=False)
    op.create_index(op.f('idx_trading_logs_timestamp'), 'trading_logs', ['timestamp'], unique=False)
    op.create_table('notifications',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('telegram_sent', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('notifications_pkey'))
    )
    # ### end Alembic commands ###
