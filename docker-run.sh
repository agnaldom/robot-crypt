#!/bin/bash

# Script para executar o Robot-Crypt em Docker

echo "================================"
echo "  Robot-Crypt Docker Launcher   "
echo "================================"
echo

# Verificando se o Docker est√° instalado
if ! command -v docker &> /dev/null; then
    echo "Docker n√£o est√° instalado. Por favor, instale o Docker primeiro."
    echo "Visite: https://docs.docker.com/get-docker/"
    exit 1
fi

# Menu de op√ß√µes
echo "Escolha um modo de execu√ß√£o:"
echo "1. Modo de Simula√ß√£o (sem API real)"
echo "2. Modo Testnet (API da Binance Testnet)"
echo "3. Modo Produ√ß√£o B√°sico (API da Binance Real)"
echo "4. Modo Produ√ß√£o Avan√ßado (Configura√ß√£o detalhada para conta real)"
echo "5. Construir/Reconstruir a imagem Docker"
echo "6. Visualizar logs"
echo "7. Parar o container"
echo "8. Ver status de monitoramento"
echo "9. Sair"
echo
read -p "Op√ß√£o: " opcao

case $opcao in
    1)
        echo "Configurando modo de simula√ß√£o..."
        python setup_simulation.py
        echo "Iniciando container em modo de simula√ß√£o..."
        docker-compose up -d
        ;;
    2)
        echo "Configurando modo testnet..."
        ./setup_testnet.sh
        echo "Iniciando container em modo testnet..."
        docker-compose up -d
        ;;
    3)
        echo "‚ö†Ô∏è ATEN√á√ÉO: Modo de Produ√ß√£o usa DINHEIRO REAL! ‚ö†Ô∏è"
        read -p "Tem certeza que deseja continuar? (s/n): " confirmacao
        if [[ "$confirmacao" == "s" || "$confirmacao" == "S" ]]; then
            echo "Configurando modo de produ√ß√£o b√°sico..."
            ./setup_real.sh
            echo "Iniciando container em modo de produ√ß√£o..."
            docker-compose up -d
        else
            echo "Opera√ß√£o cancelada."
        fi
        ;;
    4)
        echo "‚ö†Ô∏è ATEN√á√ÉO: Modo de Produ√ß√£o Avan√ßado usa DINHEIRO REAL! ‚ö†Ô∏è"
        read -p "Tem certeza que deseja continuar? (s/n): " confirmacao
        if [[ "$confirmacao" == "s" || "$confirmacao" == "S" ]]; then
            echo "Configurando modo de produ√ß√£o avan√ßado..."
            chmod +x setup_real_advanced.sh
            ./setup_real_advanced.sh
            echo "Iniciando container em modo de produ√ß√£o..."
            docker-compose up -d
        else
            echo "Opera√ß√£o cancelada."
        fi
        ;;
    5)
        echo "Construindo/Reconstruindo a imagem Docker..."
        docker-compose build --no-cache
        echo "Imagem constru√≠da com sucesso!"
        ;;
    6)
        echo "Visualizando logs (pressione CTRL+C para sair)..."
        docker-compose logs -f
        ;;
    7)
        echo "Parando o container..."
        docker-compose down
        echo "Container parado."
        ;;
    8)
        echo "Verificando status de monitoramento..."
        # Verificar se o container est√° em execu√ß√£o
        if docker ps | grep -q "robot-crypt"; then
            echo "‚úÖ Bot em execu√ß√£o"
            
            # Criar diret√≥rios necess√°rios caso n√£o existam
            mkdir -p logs
            mkdir -p data
            
            # Verificar logs recentes
            echo "üìù Logs recentes:"
            docker-compose logs --tail=10
            
            # Verificar estado (se arquivo existe)
            if [ -f "data/app_state.json" ]; then
                echo "üíæ Arquivo de estado encontrado ($(date -r data/app_state.json '+%Y-%m-%d %H:%M:%S'))"
                
                # Se tiver jq instalado, mostrar informa√ß√µes do estado
                if command -v jq &> /dev/null; then
                    echo "üìä Resumo do estado:"
                    jq -r '.timestamp // "N/A"' data/app_state.json 2>/dev/null | xargs echo "- √öltima atualiza√ß√£o:"
                    jq '.trades_history | length // 0' data/app_state.json 2>/dev/null | xargs echo "- Total de opera√ß√µes:"
                    jq '.open_positions | length // 0' data/app_state.json 2>/dev/null | xargs echo "- Posi√ß√µes abertas:"
                fi
            else
                echo "‚ùå Arquivo de estado n√£o encontrado"
            fi
        else
            echo "‚ùå Bot n√£o est√° em execu√ß√£o"
        fi
        ;;
    9)
        echo "Saindo..."
        exit 0
        ;;
    *)
        echo "Op√ß√£o inv√°lida."
        exit 1
        ;;
esac

echo
echo "Opera√ß√£o conclu√≠da!"
